<?xml version="1.0" encoding="UTF-8"?>
<project name="acmetelecom" default="all">
  
  
  <property file="build.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/*.lib/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/.bundle/**"/>
    <exclude name="**/*.rbc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip"/>
    <include name="*.apk"/>
    <include name="*.war"/>
    <include name="*.egg"/>
    <include name="*.ear"/>
    <include name="*.ane"/>
    <include name="*.swc"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.7" value="${jdk.home.1.7}/bin"/>
  <path id="jdk.classpath.1.7">
    <fileset dir="${jdk.home.1.7}">
      <include name="lib/ant-javafx.jar"/>
      <include name="lib/dt.jar"/>
      <include name="lib/javafx-doclet.jar"/>
      <include name="lib/javafx-mx.jar"/>
      <include name="lib/jconsole.jar"/>
      <include name="lib/sa-jdi.jar"/>
      <include name="lib/tools.jar"/>
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jfr.jar"/>
      <include name="jre/lib/jfxrt.jar"/>
      <include name="jre/lib/JObjC.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.7}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.7}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.7"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.fit.classpath">
    <fileset dir="${basedir}/lib/fit">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.lib.classpath">
    <pathelement location="${basedir}/lib/cglib-nodep-2.1_3.jar"/>
    <pathelement location="${basedir}/lib/external.jar"/>
    <pathelement location="${basedir}/lib/hamcrest-core-1.3.0RC1.jar"/>
    <pathelement location="${basedir}/lib/hamcrest-library-1.3.0RC1.jar"/>
    <pathelement location="${basedir}/lib/jmock-2.5.1.jar"/>
    <pathelement location="${basedir}/lib/jmock-2.6.0-RC2.jar"/>
    <pathelement location="${basedir}/lib/jmock-junit4-2.5.1.jar"/>
    <pathelement location="${basedir}/lib/jmock-junit4-2.6.0-RC2.jar"/>
    <pathelement location="${basedir}/lib/jmock-legacy-2.5.1.jar"/>
    <pathelement location="${basedir}/lib/junit-4.11.jar"/>
    <pathelement location="${basedir}/lib/objenesis-1.0.jar"/>
  </path>
  <!-- Register Custom Compiler Taskdefs -->
  <property name="javac2.home" value="${idea.home}/lib"/>
  <path id="javac2.classpath">
    <pathelement location="${javac2.home}/javac2.jar"/>
    <pathelement location="${javac2.home}/jdom.jar"/>
    <pathelement location="${javac2.home}/asm.jar"/>
    <pathelement location="${javac2.home}/asm-commons.jar"/>
    <pathelement location="${javac2.home}/jgoodies-forms.jar"/>
  </path>

  <property name="cobertura.dir" value="${basedir}/lib/cobertura" />

  <path id="cobertura.classpath">
        <fileset dir="${cobertura.dir}">
            <include name="cobertura.jar" />
            <include name="*.jar" />
        </fileset>
  </path>

  <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />

  <target name="register.custom.compilers">
    <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath"/>
    <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions" classpathref="javac2.classpath"/>
  </target>
  
  <!-- Modules -->
  
  
  <!-- Module AcmeTelecom -->
  
  <dirname property="module.acmetelecom.basedir" file="${ant.file}"/>
  
  
  <property name="module.jdk.home.acmetelecom" value="${project.jdk.home}"/>
  <property name="module.jdk.bin.acmetelecom" value="${project.jdk.bin}"/>
  <property name="module.jdk.classpath.acmetelecom" value="${project.jdk.classpath}"/>
  
  <property name="compiler.args.acmetelecom" value="${compiler.args}"/>
  
  <property name="acmetelecom.output.dir" value="${module.acmetelecom.basedir}/out/production/AcmeTelecom"/>
  <property name="acmetelecom.testoutput.dir" value="${module.acmetelecom.basedir}/out/test/AcmeTelecom"/>s
  <property name="instrumented.dir" value="${module.acmetelecom.basedir}/out/instrumented/AcmeTelecom"/>
  
  <path id="acmetelecom.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="acmetelecom.module.production.classpath">
    <path refid="${module.jdk.classpath.acmetelecom}"/>
    <path refid="library.fit.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="acmetelecom.runtime.production.module.classpath">
    <pathelement location="${acmetelecom.output.dir}"/>
    <path refid="library.fit.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="acmetelecom.module.classpath">
    <path refid="${module.jdk.classpath.acmetelecom}"/>
    <pathelement location="${acmetelecom.output.dir}"/>
    <path refid="library.fit.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  <path id="acmetelecom.runtime.module.classpath">
    <pathelement location="${acmetelecom.testoutput.dir}"/>
    <pathelement location="${acmetelecom.output.dir}"/>
    <path refid="library.fit.classpath"/>
    <path refid="library.lib.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.acmetelecom">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.acmetelecom">
    <patternset refid="excluded.from.module.acmetelecom"/>
  </patternset>
  
  <path id="acmetelecom.module.sourcepath">
    <dirset dir="${module.acmetelecom.basedir}">
      <include name="acceptanceTests"/>
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.acmetelecom" depends="compile.module.acmetelecom.production,compile.module.acmetelecom.tests" description="Compile module AcmeTelecom"/>
  
  <target name="compile.module.acmetelecom.production" depends="register.custom.compilers" description="Compile module AcmeTelecom; production classes">
    <mkdir dir="${acmetelecom.output.dir}"/>
    <javac2 destdir="${acmetelecom.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true" executable="${module.jdk.bin.acmetelecom}/javac">
      <compilerarg line="${compiler.args.acmetelecom}"/>
      <bootclasspath refid="acmetelecom.module.bootclasspath"/>
      <classpath refid="acmetelecom.module.production.classpath"/>
      <src refid="acmetelecom.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.acmetelecom"/>
    </javac2>
    
    <copy todir="${acmetelecom.output.dir}">
      <fileset dir="${module.acmetelecom.basedir}/acceptanceTests">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.acmetelecom.basedir}/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.acmetelecom.tests" depends="register.custom.compilers,compile.module.acmetelecom.production" description="compile module AcmeTelecom; test classes" unless="skip.tests"/>
  
  <target name="clean.module.acmetelecom" description="cleanup module">
    <delete dir="${acmetelecom.output.dir}"/>
    <delete dir="${acmetelecom.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>

    <target name="cobertura_instrument" description="Instrument classes">
        <delete file="cobertura.ser" />
        <cobertura-instrument todir="${instrumented.dir}">
            <ignore regex="org.apache.log4j.*" />
            <fileset dir="${acmetelecom.output.dir}">
                <include name="**/*.class" />
                <exclude name="**/*Test.class" />
            </fileset>
        </cobertura-instrument>
    </target>

    <target name="Acctest" description="run FolderRunner on tests in html">
        <java classname="fitlibrary.runner.FolderRunner" fork="yes"> <!--failonerror="yes"> -->
            <jvmarg value="-javaagent:${basedir}/lib/jmock/jdave-unfinalizer-1.1.jar" />
            <arg value="${module.acmetelecom.basedir}/fit"/>
            <arg value="${module.acmetelecom.basedir}/reports"/>
            <!-- Add the instrumented classes to the path, before the normal ones. -->
            <classpath>
                <pathelement location="${instrumented.dir}"/>
            </classpath>
            <classpath refid="acmetelecom.runtime.module.classpath"/>
            <classpath refid="cobertura.classpath" />
        </java>
    </target>

    <target name="unittest" description="Execute unit tests">
        <mkdir dir="tmp/rawtestoutput"/>
        <junit fork="true" forkmode="once">
            <jvmarg value="-javaagent:${basedir}/lib/jmock/jdave-unfinalizer-1.1.jar"/>

            <sysproperty key="net.sourceforge.cobertura.datafile" file="cobertura.ser" />
            <!-- Add the instrumented classes to the path, before the normal ones. -->
            <classpath>
                <pathelement location="${instrumented.dir}"/>
            </classpath>
            <classpath refid="acmetelecom.runtime.module.classpath"/>
            <classpath refid="cobertura.classpath" />
            <batchtest todir="tmp/rawtestoutput">
                <fileset dir="${acmetelecom.testoutput.dir}" includes="**/*Test.class" excludes="**/SystemUnderTest.class" />
                <formatter type="xml"/>
            </batchtest>
        </junit>
        <!--Report already generated while running the tests with the plain production classes-->
    </target>


    <target name="cobertura_report" description="Create reports">
        <cobertura-report format="xml" destdir="coverage" srcdir="${module.acmetelecom.basedir}/src" />
    </target>

  <target name="clean" depends="clean.module.acmetelecom" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.acmetelecom" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>